-- Copyright (C) 2023 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler 1.0.19-10671667
-- VHDL Extension for HxS 1.0.21-b962bd24
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

package InterruptCollectorIfcPackage is

	type T_InterruptCollectorIfcAvalonDown is
	record
		Address : std_logic_vector(3 downto 0);
		ByteEnable : std_logic_vector(3 downto 0);
		Write : std_logic;
		WriteData : std_logic_vector(31 downto 0);
		Read : std_logic;
	end record;
	
	type T_InterruptCollectorIfcAvalonUp is
	record
		ReadData : std_logic_vector(31 downto 0);
		WaitRequest : std_logic;
	end record;
	
	type T_InterruptCollectorIfcTrace is
	record
		AvalonDown : T_InterruptCollectorIfcAvalonDown;
		AvalonUp : T_InterruptCollectorIfcAvalonUp;
		UnoccupiedAck : std_logic;
		TimeoutAck : std_logic;
	end record;
	
	type T_InterruptCollectorIfcInterruptCollectorBlkDown is
	record
		Mask3 : std_logic;
		Mask2 : std_logic;
		Mask1 : std_logic;
		Mask0 : std_logic;
		Request3Written : std_logic;
		Request2Written : std_logic;
		Request1Written : std_logic;
		Request0Written : std_logic;
		Service3Written : std_logic;
		Service2Written : std_logic;
		Service1Written : std_logic;
		Service0Written : std_logic;
		WTransPulseInterruptRequestReg : std_logic;
		WTransPulseInterruptServiceReg : std_logic;
	end record;
	
	type T_InterruptCollectorIfcInterruptCollectorBlkUp is
	record
		Request3ToBeRead : std_logic;
		Request2ToBeRead : std_logic;
		Request1ToBeRead : std_logic;
		Request0ToBeRead : std_logic;
		Service3ToBeRead : std_logic;
		Service2ToBeRead : std_logic;
		Service1ToBeRead : std_logic;
		Service0ToBeRead : std_logic;
	end record;
	
	constant INTERRUPTCOLLECTORBLK_BASE_ADDRESS : std_logic_vector(3 downto 0) := x"0";
	constant INTERRUPTCOLLECTORBLK_SIZE : std_logic_vector(3 downto 0) := x"C";
	
	constant INTERRUPTMASKREG_WIDTH : integer := 32;
	constant INTERRUPTMASKREG_ADDRESS : std_logic_vector(3 downto 0) := std_logic_vector(x"0" + unsigned(INTERRUPTCOLLECTORBLK_BASE_ADDRESS));
	
	constant MASK3_POSITION : integer := 3;
	constant MASK3_WIDTH : integer := 1;
	constant MASK3_MASK : std_logic_vector(31 downto 0) := x"00000008";
	constant MASK3_INTERRUPTDISABLED : std_logic := '0';
	constant MASK3_INTERRUPTENABLED : std_logic := '1';
	
	constant MASK2_POSITION : integer := 2;
	constant MASK2_WIDTH : integer := 1;
	constant MASK2_MASK : std_logic_vector(31 downto 0) := x"00000004";
	constant MASK2_INTERRUPTDISABLED : std_logic := '0';
	constant MASK2_INTERRUPTENABLED : std_logic := '1';
	
	constant MASK1_POSITION : integer := 1;
	constant MASK1_WIDTH : integer := 1;
	constant MASK1_MASK : std_logic_vector(31 downto 0) := x"00000002";
	constant MASK1_INTERRUPTDISABLED : std_logic := '0';
	constant MASK1_INTERRUPTENABLED : std_logic := '1';
	
	constant MASK0_POSITION : integer := 0;
	constant MASK0_WIDTH : integer := 1;
	constant MASK0_MASK : std_logic_vector(31 downto 0) := x"00000001";
	constant MASK0_INTERRUPTDISABLED : std_logic := '0';
	constant MASK0_INTERRUPTENABLED : std_logic := '1';
	
	constant INTERRUPTREQUESTREG_WIDTH : integer := 32;
	constant INTERRUPTREQUESTREG_ADDRESS : std_logic_vector(3 downto 0) := std_logic_vector(x"4" + unsigned(INTERRUPTCOLLECTORBLK_BASE_ADDRESS));
	
	constant REQUEST3_POSITION : integer := 3;
	constant REQUEST3_WIDTH : integer := 1;
	constant REQUEST3_MASK : std_logic_vector(31 downto 0) := x"00000008";
	constant REQUEST3_NOTPENDING : std_logic := '0';
	constant REQUEST3_PENDING : std_logic := '1';
	constant REQUEST3_NOTCONFIRMED : std_logic := '0';
	constant REQUEST3_CONFIRMED : std_logic := '1';
	
	constant REQUEST2_POSITION : integer := 2;
	constant REQUEST2_WIDTH : integer := 1;
	constant REQUEST2_MASK : std_logic_vector(31 downto 0) := x"00000004";
	constant REQUEST2_NOTPENDING : std_logic := '0';
	constant REQUEST2_PENDING : std_logic := '1';
	constant REQUEST2_NOTCONFIRMED : std_logic := '0';
	constant REQUEST2_CONFIRMED : std_logic := '1';
	
	constant REQUEST1_POSITION : integer := 1;
	constant REQUEST1_WIDTH : integer := 1;
	constant REQUEST1_MASK : std_logic_vector(31 downto 0) := x"00000002";
	constant REQUEST1_NOTPENDING : std_logic := '0';
	constant REQUEST1_PENDING : std_logic := '1';
	constant REQUEST1_NOTCONFIRMED : std_logic := '0';
	constant REQUEST1_CONFIRMED : std_logic := '1';
	
	constant REQUEST0_POSITION : integer := 0;
	constant REQUEST0_WIDTH : integer := 1;
	constant REQUEST0_MASK : std_logic_vector(31 downto 0) := x"00000001";
	constant REQUEST0_NOTPENDING : std_logic := '0';
	constant REQUEST0_PENDING : std_logic := '1';
	constant REQUEST0_NOTCONFIRMED : std_logic := '0';
	constant REQUEST0_CONFIRMED : std_logic := '1';
	
	constant INTERRUPTSERVICEREG_WIDTH : integer := 32;
	constant INTERRUPTSERVICEREG_ADDRESS : std_logic_vector(3 downto 0) := std_logic_vector(x"8" + unsigned(INTERRUPTCOLLECTORBLK_BASE_ADDRESS));
	
	constant SERVICE3_POSITION : integer := 3;
	constant SERVICE3_WIDTH : integer := 1;
	constant SERVICE3_MASK : std_logic_vector(31 downto 0) := x"00000008";
	constant SERVICE3_ENDED : std_logic := '0';
	constant SERVICE3_INPROCESS : std_logic := '1';
	constant SERVICE3_NOTCONFIRMED : std_logic := '0';
	constant SERVICE3_CONFIRMED : std_logic := '1';
	
	constant SERVICE2_POSITION : integer := 2;
	constant SERVICE2_WIDTH : integer := 1;
	constant SERVICE2_MASK : std_logic_vector(31 downto 0) := x"00000004";
	constant SERVICE2_ENDED : std_logic := '0';
	constant SERVICE2_INPROCESS : std_logic := '1';
	constant SERVICE2_NOTCONFIRMED : std_logic := '0';
	constant SERVICE2_CONFIRMED : std_logic := '1';
	
	constant SERVICE1_POSITION : integer := 1;
	constant SERVICE1_WIDTH : integer := 1;
	constant SERVICE1_MASK : std_logic_vector(31 downto 0) := x"00000002";
	constant SERVICE1_ENDED : std_logic := '0';
	constant SERVICE1_INPROCESS : std_logic := '1';
	constant SERVICE1_NOTCONFIRMED : std_logic := '0';
	constant SERVICE1_CONFIRMED : std_logic := '1';
	
	constant SERVICE0_POSITION : integer := 0;
	constant SERVICE0_WIDTH : integer := 1;
	constant SERVICE0_MASK : std_logic_vector(31 downto 0) := x"00000001";
	constant SERVICE0_ENDED : std_logic := '0';
	constant SERVICE0_INPROCESS : std_logic := '1';
	constant SERVICE0_NOTCONFIRMED : std_logic := '0';
	constant SERVICE0_CONFIRMED : std_logic := '1';
	
	constant ASYNC_INIT : std_logic := '0';
	
end;
