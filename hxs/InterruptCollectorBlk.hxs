//******************************************************************************
//
//                  /------o
//            eccelerators
//         o------/
//
// This file is an Eccelerators GmbH sample project.
//
// MIT License:
// Copyright (c) 2023 Eccelerators GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//******************************************************************************
namespace Eccelerators.Library.Base
{

	block InterruptCollectorBlk
	{
		Name = "Interrupt Collector Block";
		Description = "
			This block defines a basic interrupt collector for **level triggered** interrupt sources.
			Usually edge triggered sources e.g., timers pulse can be converted to level triggered 
			ones by catching them in the user logic. 

			Constraints:
            
            1. Allow interrupt processing by multiple CPUs without need for spinlocks.
			2. Enable forwarding an interrupt to the CPU(s) by a mask for each source.
			3. Provide control pulses to notify the user logic when a interrupt service for an 
			   interrupt request has been started and has been ended. 
			4. Use the control pulses to reset the interrupt request fo a source or do it by 
			   a write ore read access directly to the user logic e.g. reading the receive data 
			   register of an UART. 
			   												 			 
			";
		Registers = [
			InterruptCollectorBlk.InterruptMaskReg,
			InterruptCollectorBlk.InterruptRequestReg,
			InterruptCollectorBlk.InterruptServiceReg
		];
		Size = 0x10;

		register InterruptMaskReg
		{
			Name = "Interrupt Mask Register";
			Width = 32;
			Bits = [
				InterruptCollectorBlk.InterruptMaskReg.Mask,
				Reserved(Width=31)
			];
			enum Mask
			{
				Width = 1;
				Values = [
					InterruptCollectorBlk.InterruptMaskReg.Mask.InterruptEnabled,
					InterruptCollectorBlk.InterruptMaskReg.Mask.InterruptDisabled
				];
				value InterruptEnabled
				{
					Value = 0x1;
					Description = "Interrupt is forwarded to CPU(s).";
				}
			
				value InterruptDisabled
				{
					Value = 0x0;
					Description = "Interrupt is not forwarded to CPU(s).";
				}
				Resets = [Rst(Value=0x0)];
			}
		}
	
		register InterruptRequestReg
		{
			Name = "Interrupt Request Register";
			Width = 32;
			Bits = [
				InterruptCollectorBlk.InterruptRequestReg.Request,
				Reserved(Width=31)
			];
			enum Request
			{
				Behaviour = BitBehaviour.Transparent;
				Width = 1;
				Values = [
					InterruptCollectorBlk.InterruptRequestReg.Request.Pending,
					InterruptCollectorBlk.InterruptRequestReg.Request.NotPending,
					InterruptCollectorBlk.InterruptRequestReg.Request.Confirmed,
					InterruptCollectorBlk.InterruptRequestReg.Request.InEffective
				];
				value Pending
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Read;
					Description = "An Interrupt is pending.";
				}
			
				value NotPending
				{
					Value = 0x0;
					Behaviour = ValueBehaviour.Read;
					Description = "An Interrupt is not pending.";
				}
				value Confirmed
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Write;
					Name = "Notifies HW that a pending interrupt has been recognized by SW.";
					Description = "
						SW confirms that a respective interrupt service routine has been entered.
						The value isn't stored, thus there is no need to reset it to '0' again.	
						Solely the write action is sufficient.	
						";
				}
				value InEffective
				{
					Name = "Writing this value has no effect.";
					Behaviour = ValueBehaviour.Write;
					Value = 0x0;
				}
				Resets = [Rst(Value=0x0)];
			}
		}
	
		register InterruptServiceReg
		{
			Name = "Interrupt Service Register";
			Width = 32;
			Bits = [
				InterruptCollectorBlk.InterruptServiceReg.Service,
				Reserved(Width=31)
			];
			enum Service
			{
				Behaviour = BitBehaviour.Transparent;
				Width = 1;
				Values = [
					InterruptCollectorBlk.InterruptServiceReg.Service.InProcess,
					InterruptCollectorBlk.InterruptServiceReg.Service.Ended,
					InterruptCollectorBlk.InterruptServiceReg.Service.Confirmed,
					InterruptCollectorBlk.InterruptServiceReg.Service.InEffective
				];
				value InProcess
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Read;
					Description = "The Interrupt is in service.";
				}
			
				value Ended
				{
					Value = 0x0;
					Behaviour = ValueBehaviour.Read;
					Description = "The Interrupt service has ended.";
				}
				value Confirmed
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Write;
					Name = "Notifies HW that a pending interrupt has been recognized by SW.";
					Description = "
						SW confirms that a respective interrupt service routine has been processed completely.
						The value isn't stored, thus there is no need to reset it to '0' again.	
						Solely the write action is sufficient.	
						";
				}
				value InEffective
				{
					Name = "Writing this value has no effect.";
					Behaviour = ValueBehaviour.Write;
					Value = 0x0;
				}
				Resets = [Rst(Value=0x0)];
			}
		}

	}

}
